{"version":3,"sources":["ui/BreakSessionUi.js","components/Break.js","components/Session.js","components/TimeLeft.js","App.js","serviceWorker.js","index.js"],"names":["BreakSessionContainer","children","props","className","BreakSessionLabel","BreakSessionTime","PlusMinusButton","PlusMinusButtonContainer","Break","breakLength","decrementBreakLength","incrementBreakLength","breakLengthInMins","moment","duration","asMinutes","id","onClick","Session","sessionLength","decrementSessionLength","incrementSessionLength","sessionLengthInMins","momentDurationFormatSetup","TimeLeft","handleStartStopClick","timerLabel","startStopButtonLabel","timeLeft","handleResetButtonClick","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","setSessionLength","setBreakLength","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setTimeLeft","useEffect","current","play","isStarted","newBreakLength","clearInterval","newIntervalId","setInterval","prevTimeLeft","load","newSessionLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a51b6f0f.chunk.js","sourcesContent":["import React from 'react'\n\nexport const BreakSessionContainer = ({children, ...props}) => {\n    return (\n        <div className=\"flex flex-col items-center\" {...props}>\n            {children}\n        </div>\n    )\n}\n\nexport const BreakSessionLabel = ({children, ...props}) => {\n    return (\n        <p className=\"text-lg text-green-200\" {...props}>{children}</p>\n    )\n}\n\nexport const BreakSessionTime = ({children, ...props}) => {\n    return (\n        <p className=\"text-4xl font-bold text-white\" {...props}>{children}</p>\n    )\n}\n\nexport const PlusMinusButton = ({children, ...props}) => {\n    return (\n        <button {...props} className='mt-2 text-lg text-gray-800 px-4 py-2 bg-green-200 rounded'>{children}</button>\n    )\n}\n\nexport const PlusMinusButtonContainer = ({children, ...props}) => {\n    return (\n        <div {...props} className=\"grid grid-flow-col gap-2 rounded\">{children}</div>\n    )\n}","import React from 'react'\nimport moment from 'moment'\n\nimport {BreakSessionContainer, BreakSessionLabel, BreakSessionTime, PlusMinusButtonContainer, PlusMinusButton} from '../ui/BreakSessionUi'\n\nconst Break = ({breakLength, decrementBreakLength, incrementBreakLength}) => {\n\n    const breakLengthInMins = moment.duration(breakLength, 's').asMinutes()\n\n    return (\n        <BreakSessionContainer>\n            <BreakSessionLabel id='break-label'>Break</BreakSessionLabel>\n            <BreakSessionTime id='break-length'>{breakLengthInMins}</BreakSessionTime>\n            <PlusMinusButtonContainer>\n                <PlusMinusButton id=\"break-decrement\" onClick={decrementBreakLength}>-</PlusMinusButton>\n                <PlusMinusButton id=\"break-increment\" onClick={incrementBreakLength}>+</PlusMinusButton>\n            </PlusMinusButtonContainer>\n        </BreakSessionContainer>\n    )\n}\n\nexport default Break","import React from 'react'\nimport moment from 'moment'\n\nimport {BreakSessionContainer, BreakSessionLabel, BreakSessionTime, PlusMinusButtonContainer, PlusMinusButton} from '../ui/BreakSessionUi'\n\nconst Session = ({sessionLength, decrementSessionLength, incrementSessionLength}) => {\n\n    const sessionLengthInMins = moment.duration(sessionLength, 's').asMinutes()\n\n    return (\n        <BreakSessionContainer>\n            <BreakSessionLabel id='session-label'>Session</BreakSessionLabel>\n            <BreakSessionTime id='session-length'>{sessionLengthInMins}</BreakSessionTime>\n            <PlusMinusButtonContainer>\n                <PlusMinusButton id=\"session-decrement\" onClick={decrementSessionLength}>-</PlusMinusButton>\n                <PlusMinusButton id=\"session-increment\" onClick={incrementSessionLength}>+</PlusMinusButton>\n            </PlusMinusButtonContainer>\n        </BreakSessionContainer>\n    )\n}\n\nexport default Session","import React from 'react'\nimport moment from 'moment'\nimport momentDurationFormatSetup from 'moment-duration-format'\n\nmomentDurationFormatSetup(moment)\n\nconst TimeLeft = ({handleStartStopClick, timerLabel, startStopButtonLabel, timeLeft, handleResetButtonClick}) => {\n\n\n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', {trim: false})\n    return (\n        <div className=\"flex flex-col justify-evenly items-center w-64 h-64 bg-red-600 rounded-full\">\n            <p className=\"text-red-900 text-2xl\" id='timer-label'>{timerLabel}</p>\n            <p className=\"font-clock text-4xl font-bold\"id='time-left'>{formattedTimeLeft}</p>\n            <button className=\"text-red-400 font-semibold bg-green-900 px-4 py-2 rounded-lg\" id='start_stop' onClick={handleStartStopClick}>{startStopButtonLabel}</button>\n            <button className=\"border-2 text-green-900 rounded-lg border-green-900 border-solid px-4 py-2\" id='reset' onClick={handleResetButtonClick}>reset</button>\n        </div>\n    )\n}\n\nexport default TimeLeft\n","import React, {useState, useEffect, useRef} from 'react';\nimport './assets/main.css';\n\nimport Break from './components/Break'\nimport Session from './components/Session'\nimport TimeLeft from './components/TimeLeft'\n\nfunction App() {\n  const audioElement = useRef(null)\n  const [sessionLength, setSessionLength] = useState(1500)\n  const [breakLength, setBreakLength] = useState(300)\n  const [currentSessionType, setCurrentSessionType] = useState('Session') // 'Session or 'Break'\n  const [intervalId, setIntervalId] = useState(null)\n  const [timeLeft, setTimeLeft] = useState(sessionLength)\n\n    useEffect(() => {\n        setTimeLeft(sessionLength)\n    }, [sessionLength])\n\n    useEffect(() => {\n      if (timeLeft === 0){\n        audioElement.current.play()\n        if(currentSessionType === 'Session'){\n          setCurrentSessionType('Break')\n          setTimeLeft(breakLength)\n        } else if (currentSessionType === 'Break'){\n          setCurrentSessionType('Session')\n          setTimeLeft(sessionLength)\n        }\n      }\n    }, [timeLeft, breakLength, currentSessionType, sessionLength])\n\n    const decrementBreakLength = () => {\n        const newBreakLength = breakLength - 60\n        if (newBreakLength > 0){\n          setBreakLength(newBreakLength)\n        }\n        \n    }\n    const incrementBreakLength = () => {\n      const newBreakLength = breakLength + 60\n      if (newBreakLength <= 60 * 60){\n        setBreakLength(newBreakLength)\n\n      }\n    }\n\n  const decrementSessionLength = () => {\n      const newSessionLength = sessionLength - 60\n      if (newSessionLength > 0){\n          setSessionLength(newSessionLength)\n      }\n  }\n  const incrementSessionLength = () => {\n    const newSessionLength = sessionLength + 60\n    if (newSessionLength <= 60*60){\n      setSessionLength(sessionLength + 60)\n\n    }\n  }\n\n  const handleResetButtonClick = () => {\n    // reset audio\n    audioElement.current.load()\n    // clear timeout interval\n    clearInterval(intervalId)\n    // set the intervalId to null\n    setIntervalId(null)\n    // set the sessionType to 'Session'\n    setCurrentSessionType('Session')\n    // reset the session length to 25 mins\n    setSessionLength(1500)\n    // reset the break length to 5mins\n    setBreakLength(300)\n    // reset the timer to 25 mins (init session length)\n    setTimeLeft(1500)\n  }\n  const isStarted = intervalId !== null\n    const handleStartStopClick = () => {\n        if (isStarted){\n            clearInterval(intervalId)\n            setIntervalId(null)\n        } else {\n            const newIntervalId = setInterval(() => {\n                setTimeLeft(prevTimeLeft => prevTimeLeft - 1)\n            }, 1000)\n            setIntervalId(newIntervalId)\n        }\n    }\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center bg-green-700\">\n      <div className=\"flex w-full justify-around\">\n        <Break \n          breakLength={breakLength}\n          decrementBreakLength={decrementBreakLength}\n          incrementBreakLength={incrementBreakLength}\n        />\n        <TimeLeft \n          timerLabel={currentSessionType}\n          handleStartStopClick={handleStartStopClick}\n          startStopButtonLabel={isStarted ? 'stop':'start'}\n          timeLeft={timeLeft}\n          handleResetButtonClick={handleResetButtonClick}\n          />\n        <Session \n          sessionLength={sessionLength}\n          decrementSessionLength={decrementSessionLength}\n          incrementSessionLength={incrementSessionLength}\n        />\n      </div>\n      <audio id='beep' ref={audioElement}>\n        <source src='https://onlineclock.net/audio/options/default.mp3' type='audio/mpeg'/>\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}